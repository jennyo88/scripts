# -------------------------------------------------------
# x265 / video_sub / metadata 
# -------------------------------------------------------

# Function for converting video files to x265 format using FFmpeg
x265() {
	check_ffmpeg
	# Prompt user for source extension with default
	srcExt=$(whiptail --title "x265 Script" --inputbox "Source extension? (default: mkv)" 10 60 "mkv" 3>&1 1>&2 2>&3)
	srcExt=${srcExt:-mkv}

	# Prompt user for destination extension with default
	destExt=$(whiptail --title "x265 Script" --inputbox "Destination extension? (default: mp4)" 10 60 "mp4" 3>&1 1>&2 2>&3)
	destExt=${destExt:-mp4}

	# Prompt user for source directory
	srcDir=$(whiptail --title "x265 Script" --inputbox "Source directory?" 10 60 "" 3>&1 1>&2 2>&3)

	# Prompt user for destination directory with default
	destDir=$(whiptail --title "x265 Script" --inputbox "Destination directory? (default: DONE)" 10 60 "DONE" 3>&1 1>&2 2>&3)
	destDir=${destDir:-DONE}

	# Convert files in parallel
	for filename in "$srcDir"/*.$srcExt; do
		basePath=${filename%.*}
		baseName=${basePath##*/}
		ffmpeg -i "$filename" -c:v libx265 -c:a copy -c:s copy -threads 2 "$destDir"/"$baseName"."$destExt" &
	done
	wait  # Ensure all conversions complete
	echo -e "Conversion complete!\a"
	pause
	show_menu_1
}

# Function for converting video files and extracting subtitles
video_sub() {
	check_ffmpeg
	# Convert TS to MKV in parallel
	for filename in ts/*.ts; do
		basePath=${filename%.*}
		baseName=${basePath##*/}
		ffmpeg -i "$filename" -map 0 -c copy -map_metadata 0 "mkv/$baseName.mkv" &
	done
	wait

	# Extract subtitles in parallel
	for filename in ts/*.ts; do
		basePath=${filename%.*}
		baseName=${basePath##*/}
		ffmpeg -f lavfi -i "movie=$filename[out0+subcc]" -map s "srt/$baseName.en.srt" &
	done
	wait

	# Convert MKV to MP4 in parallel
	for filename in mkv/*.mkv; do
		basePath=${filename%.*}
		baseName=${basePath##*/}
		ffmpeg -i "$filename" -map 0 -c:v libx265 -c:a copy -map_metadata 0 -threads 3 "DONE/$baseName.mp4" &
	done
	wait
	echo -e "Conversion complete!\a"
	pause
	show_menu_1
}

# Function to update language metadata in MP4 video files
metadata() {
  check_ffmpeg
  # Prompting the user to enter the folder path
  folder_path=$(whiptail --title "Metadata Script" --inputbox "Enter the folder path where the video files are located:" 10 60 "" 3>&1 1>&2 2>&3)

  # Checking if the folder exists
  if [ -d "$folder_path" ]; then
    mkdir -p "$folder_path/Metadata"

    # Prompt user for language once
    language=$(whiptail --title "Metadata Script" --inputbox "Enter the three-letter language code for all files (default: eng)" 10 60 "eng" 3>&1 1>&2 2>&3)
    language=${language:-eng}

    cd "$folder_path"

    # Loop through each MP4 file and update metadata in parallel
    for file in *.mp4; do
      if [[ -f "$file" && "$file" != "metadata.sh" && "$file" != "Metadata" ]]; then
        ffmpeg -i "$file" -metadata:s:a:0 language="$language" -codec copy "Metadata/$file" &
      fi
    done
    wait

    echo "Metadata files are saved in $folder_path/Metadata"
  else
    echo "Folder not found."
  fi

  echo -e "Metadata has been encoded!\a"
  pause
  show_menu_1
}

# Function to convert TS to MKV for PLEX compatibility
plex() {
  check_ffmpeg
  # Prompt user with default values
  srcExt=$(whiptail --title "plex TS to MKV" --inputbox "Source extension? (default: ts)" 10 60 "ts" 3>&1 1>&2 2>&3)
  srcExt=${srcExt:-ts}
  destExt=$(whiptail --title "plex TS to MKV" --inputbox "Destination extension? (default: mkv)" 10 60 "mkv" 3>&1 1>&2 2>&3)
  destExt=${destExt:-mkv}
  srcDir=$(whiptail --title "plex TS to MKV" --inputbox "Source directory?" 10 60 "" 3>&1 1>&2 2>&3)
  destDir=$(whiptail --title "plex TS to MKV" --inputbox "Destination directory?" 10 60 "" 3>&1 1>&2 2>&3)

  # Convert in parallel
  for filename in "$srcDir"/*.$srcExt; do
    basePath=${filename%.*}
    baseName=${basePath##*/}
    ffmpeg -i "$filename" -map 0 -c copy "$destDir"/"$baseName"."$destExt" &
  done
  wait

  echo -e "Conversion from ${srcExt} to ${destExt} complete!\a"
  pause
  show_menu_1
}
