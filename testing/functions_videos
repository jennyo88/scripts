# -------------------------------------------------------
# x265 / m3u8 / tubi
# -------------------------------------------------------

# Function for converting video files to x265 format using FFmpeg with Whiptail
x265() {
	check_ffmpeg
	whiptail --title "x265 Conversion" --msgbox "This script converts video files to x265 format." 10 50

	srcExt=$(whiptail --inputbox "Enter source extension (mkv, mp4, avi):" 10 50 3>&1 1>&2 2>&3)
	destExt=$(whiptail --inputbox "Enter destination extension (mkv or mp4; default: mp4):" 10 50 3>&1 1>&2 2>&3)
	destExt=${destExt:-mp4}

	srcDir=$(whiptail --inputbox "Enter source directory:" 10 50 3>&1 1>&2 2>&3)
	destDir=$(whiptail --inputbox "Enter destination directory (default: DONE):" 10 50 3>&1 1>&2 2>&3)
	destDir=${destDir:-DONE}

	for filename in "$srcDir"/*.$srcExt; do
		basePath=${filename%.*}
		baseName=${basePath##*/}
		if ffmpeg -i "$filename" -c:v libx265 -c:a copy -threads 2 "$destDir/$baseName.$destExt"; then
			whiptail --msgbox "Conversion complete: $baseName.$destExt" 10 50
		else
			whiptail --msgbox "Error during conversion: $filename" 10 50
		fi
	done
}

# Function for converting M3U8 stream to TS format using FFmpeg with Whiptail
m3u8() {
	check_ffmpeg
	whiptail --title "M3U8 to TS Conversion" --msgbox "Convert M3U8 streams to TS format." 10 50

	destExt=$(whiptail --inputbox "Enter destination extension (default: ts):" 10 50 3>&1 1>&2 2>&3)
	destExt=${destExt:-ts}
	destDir=$(whiptail --inputbox "Enter destination directory (default: ts):" 10 50 3>&1 1>&2 2>&3)
	destDir=${destDir:-ts}

	srcAdd=$(whiptail --inputbox "Enter source web address:" 10 50 3>&1 1>&2 2>&3)
	baseName=$(whiptail --inputbox "Enter movie name (use periods between words):" 10 50 3>&1 1>&2 2>&3)
	baseYear=$(whiptail --inputbox "Enter movie release year:" 10 50 3>&1 1>&2 2>&3)
	baseResolution=$(whiptail --inputbox "Enter resolution (480p, 720p, 1080p; default: 720p):" 10 50 3>&1 1>&2 2>&3)
	baseResolution=${baseResolution:-720p}

	if ffmpeg -i "$srcAdd" -bsf:a aac_adtstoasc -c:v copy -c:a aac -map 0 -crf 50 "$destDir/$baseName.$baseYear.$baseResolution.WEBRip.x265-$baseScene.$destExt"; then
		whiptail --msgbox "Conversion complete!" 10 50
	else
		whiptail --msgbox "Error during conversion!" 10 50
	fi
}

# Function for downloading and merging video and audio files for Tubi episodes using Whiptail
tubi() {
	check_ffmpeg
	check_wget
	whiptail --title "Tubi Downloader" --msgbox "Download and merge video/audio files for Tubi episodes." 10 50

	show_name=$(whiptail --inputbox "Enter the name of the show:" 10 50 3>&1 1>&2 2>&3)
	first_episode=$(whiptail --inputbox "Enter the first episode number:" 10 50 3>&1 1>&2 2>&3)
	last_episode=$(whiptail --inputbox "Enter the last episode number:" 10 50 3>&1 1>&2 2>&3)

	for ((episode_number = first_episode; episode_number <= last_episode; episode_number++)); do
		video_url=$(whiptail --inputbox "Enter the video URL for episode $episode_number:" 10 50 3>&1 1>&2 2>&3)
		audio_url=$(whiptail --inputbox "Enter the audio URL for episode $episode_number:" 10 50 3>&1 1>&2 2>&3)
		video_file="${show_name}_video_episode_$(printf "%02d" "$episode_number").mp4"
		audio_file="${show_name}_audio_episode_$(printf "%02d" "$episode_number").mp4"
		output_file="${show_name}.S01E$(printf "%02d" "$episode_number").WEBRip.x264.mp4"

		wget -O "$video_file" "$video_url"
		wget -O "$audio_file" "$audio_url"

		ffmpeg -i "$video_file" -i "$audio_file" -c:v copy -c:a aac "$output_file"

		whiptail --msgbox "Episode $episode_number downloaded and merged!" 10 50
	done
}

# Main menu using Whiptail
while true; do
	CHOICE=$(whiptail --title "Media Processing Script" --menu "Choose an option:" 15 60 5 \
	"1" "Convert to x265" \
	"2" "Convert M3U8 to TS" \
	"3" "Download from Tubi" \
	"4" "Exit" 3>&1 1>&2 2>&3)

	case $CHOICE in
		1) x265 ;;
		2) m3u8 ;;
		3) tubi ;;
		4) exit ;;
	esac
done
