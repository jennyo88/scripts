#!/usr/bin/env bash

# Convert
# Author: Jennifer Romero
# Description: This script provides a menu-driven interface to convert files
# Version: 4.0
# Last Updated: Feb 24, 2024
# GitHub Repository: https://github.com/jennyo88/scripts

# -----------------------------------
# COLORS
# -----------------------------------

load_colors() {
	BLUE=$'\e[38;5;39m'	    	# Blue color
	ORANGE=$'\e[38;5;208m'	# Orange color
	RED=$'\e[1;31m'		# Red color (bold)
	RESET=$'\e[0m'		# Reset color attributes
}

# Calling the load_colors() function to set color variables
load_colors # Only loaded once



# -----------------------------------
# SUBTITLE FORMULAS
# -----------------------------------

# Function to extract subtitles from video files and save as SRT
# This function prompts the user for source and destination directories,
# source and destination extensions, then iterates through all files
# in the source directory with the specified source extension,
# extracting subtitles using FFmpeg, and saving them in the destination directory
# with the specified destination extension.
#
extract_srt() {
	check_ffmpeg
	echo -e "${BLUE}"
    	echo " ╔═════════════════════════════════════════════════╗ "
    	echo " ║              Extract subtitles SCRIPT           ║ "
    	echo " ╚═════════════════════════════════════════════════╝ ""${RESET}"


	# Prompting the user for the source extension (e.g., mp4, mkv)
	prompt "Source extension? : " srcExt

	# Prompting the user for the destination extension (e.g., srt)
	prompt "Destination extension? (default: srt): " destExt
	destExt=${destExt:-srt}

	# Prompting the user for the source directory
  	prompt "Source directory? : " srcDir

	# Prompting the user for the destination directory
  	prompt "Destination directory? : " destDir
	destDir=${destDir:-srt}

	# Loop through each file in the source directory with the specified source extension
  	for filename in "$srcDir"/*.$srcExt
	do
		# Extracting the base name and path without the extension
  		basePath=${filename%.*}
    		baseName=${basePath##*/}

		# Using FFmpeg to extract subtitles and save as SRT in the destination directory
  		ffmpeg -f lavfi -i "movie="$filename"[out0+subcc]" -map s "$destDir"/"$baseName".en."$destExt"
  	done

  	echo -e "Conversion from ${srcExt} to ${destExt} complete!\a"
	pause
	show_menu_2
}

# Function to convert VTT subtitles to SRT format
# This function prompts the user for source and destination directories,
# then iterates through all VTT files in the source directory,
# converting each to SRT format using FFmpeg and saving them in the destination directory.
#
convert_srt() {
	check_ffmpeg
	echo -e "${BLUE}"
    	echo " ╔═════════════════════════════════════════════════╗ "
    	echo " ║              Convert Subtitles SCRIPT           ║ "
    	echo " ╚═════════════════════════════════════════════════╝ ""${RESET}"

	# Prompting the user for the source directory
  	prompt "Source directory? (default: vtt): " srcDir
	srcDir=${srcDir:-vtt}

	# Prompting the user for the destination directory
  	prompt "Destination directory? (default: srt): " destDir
	destDir=${destDir:-srt}

	# Loop through each VTT file in the source directory
  	for filename in "$srcDir"/*.vtt
	do
		# Extracting the base name and path without the extension
  		basePath=${filename%.*}
    		baseName=${basePath##*/}

		# Using FFmpeg to convert VTT to SRT and save the file in the destination directory
  		ffmpeg -i $filename "$destDir"/"$baseName".srt
  	done

  	echo -e "Conversion from vtt to srt complete!\a"
	pause
	show_menu_2
}

# -----------------------------------
# CLEAN-UP FORMULAS
# -----------------------------------

# Function to clean up 'ts' folder
# This function prompts the user for confirmation and, if confirmed, removes all files with .ts extension in the 'ts' folder.
#
c_ts() {
	echo -e "${BLUE}"
    	echo " ╔═════════════════════════════════════════════════╗ "
    	echo " ║                CLEAN-UP ts SCRIPT               ║ "
    	echo " ╚═════════════════════════════════════════════════╝ ""${RESET}"


	# Prompting the user for confirmation
	prompt 'Do you want to clear ts folder (y/N)? ' ans

	# Checking if the user entered 'y' or 'Y' to proceed with cleanup
	if [ "$ans" != "${ans#[Yy]}" ]
	then
		# Removing all files with .ts extension in the 'ts' folder
		rm -r ./ts/*.ts

		echo -e "TS folder cleared!\a"
		sleep 1
		show_menu_3
	fi
}

# Function to clean up 'mkv' folder
# This function prompts the user for confirmation and, if confirmed, removes all files with .mkv extension in the 'mkv' folder.
#
c_mkv() {
	echo -e "${BLUE}"
    	echo " ╔═════════════════════════════════════════════════╗ "
    	echo " ║                CLEAN-UP mkv SCRIPT              ║ "
    	echo " ╚═════════════════════════════════════════════════╝ ""${RESET}"

	# Prompting the user for confirmation
	prompt 'Do you want to clear mkv folder (y/N)? ' ans

	# Checking if the user entered 'y' or 'Y' to proceed with cleanup
	if [ "$ans" != "${ans#[Yy]}" ]
	then
		# Removing all files with .mkv extension in the 'mkv' folder
		rm -r ./mkv/*.mkv

		echo -e "MKV folder cleared!\a"
		sleep 1
		show_menu_3
	fi
}

# Function to clean up all folders
# This function prompts the user for confirmation and, if confirmed, removes all files in the 'ts' and 'mkv' folders.
#
c_all() {
	echo -e "${BLUE}"
    	echo " ╔═════════════════════════════════════════════════╗ "
    	echo " ║                Full CLEAN-UP SCRIPT             ║ "
    	echo " ╚═════════════════════════════════════════════════╝ ""${RESET}"

	# Prompting the user for confirmation
	prompt 'Do you want to clear all folders (y/N)? ' ans

	# Checking if the user entered 'y' or 'Y' to proceed with cleanup
	if [ "$ans" != "${ans#[Yy]}" ]
	then
		# Removing all files with .ts extension in the 'ts' folder
 		rm -r ./ts/*.ts

		# Removing all files with .mkv extension in the 'mkv' folder
		rm -r ./mkv/*.

		echo -e "All folders cleared!\a"
		sleep 1
		show_menu_3
	fi
}

# -----------------------------------
# INFINITE LOOP
# -----------------------------------

while true
do
	show_banner_0 && show_menu_${main_menu}
done
