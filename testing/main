#!/usr/bin/env bash
# test.sh
# Author: Jennifer Romero (modified by you)
# Description: A whiptail-driven version of main
# Version: 6.2
# Last Updated: Mar 13, 2025
# GitHub Repository: https://github.com/jennyo88/scripts/convert/main (original source)

# -----------------------------------
# SOURCE SCRIPTS
# -----------------------------------
script_urls=(
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/error_handling"
# "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/menus"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_videos"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_m3u8"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_tubi"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_ydl"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_ydl-playlist"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_ydl_other"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_descargavideos"
# "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_ytdlp"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_srt"
  "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/functions_cleanup"
# "https://raw.githubusercontent.com/jennyo88/scripts/main/convert/tmux"
# Add more script URLs as needed
)

# Function to source a script without download output
source_script() {
  local script_url=$1
  local script_name
  script_name=$(basename "${script_url}")

  # Download the script silently
  if curl -fsSL "${script_url}" -o "${script_name}" >/dev/null 2>&1; then
    # Source the script if download is successful
    source "${script_name}"
  else
    echo "Failed to download script: ${script_url}"
    exit 1
  fi
}

# Function to remove downloaded script files
cleanup_downloads() {
  for url in "${script_urls[@]}"; do
    local script_name
    script_name=$(basename "${url}")
    rm -f "${script_name}"
  done
}

# Set up a trap to run the cleanup function on script exit
trap cleanup_downloads EXIT

# Iterate through the list of script URLs and source each one
for url in "${script_urls[@]}"; do
  source_script "${url}"
done

# -----------------------------------
# Main Menu with whiptail
# -----------------------------------

while true; do
    MAIN_CHOICE=$(whiptail --title "Main Menu" --menu "Choose an option:" 20 60 4 \
        "Videos"          "Video related tasks" \
        "Subs"            "Subtitle conversion tasks" \
        "Clean-up"        "Clean up files" \
        "Exit"            "Exit the script" 3>&1 1>&2 2>&3)
        
    # Exit if user cancels the menu
    if [ $? -ne 0 ]; then
        break
    fi

    case "$MAIN_CHOICE" in
        Videos)
            VIDEO_CHOICE=$(whiptail --title "Videos Menu" --menu "Choose an option:" 20 60 3 \
                "Download" "Download videos" \
                "Convert"  "Convert videos" \
                "Back"     "Return to Main Menu" 3>&1 1>&2 2>&3)
            if [ $? -ne 0 ]; then
                continue
            fi

            case "$VIDEO_CHOICE" in
                Download)
                    DOWNLOAD_CHOICE=$(whiptail --title "Download Options" --menu "Choose a download option:" 20 60 7 \
                        "m3u8"              "Download m3u8 playlist" \
                        "youtube"           "Download from YouTube" \
                        "playlist"          "Download playlist from YouTube" \
                        "other"             "Download from other sources" \
                        "tubi"              "Download from Tubi" \
                        "descargavideos"    "Download from descargavideos" \
                        "Back"              "Return to Main Menu" 3>&1 1>&2 2>&3)
                    if [ $? -ne 0 ]; then
                        continue
                    fi

                    case "$DOWNLOAD_CHOICE" in
                        m3u8)
                            m3u8
                            ;;
                        youtube)
                            ydl
                            ;;
                        playlist)
                            playlist
                            ;;
                        other)
                            ydl_other
                            ;;
                        tubi)
                            tubi
                            ;;
                        descargavideos)
                            descargavideos
                            ;;
                    esac
                    ;;
                Convert)
                    # Conversion submenu for Videos
                    CONVERT_CHOICE=$(whiptail --title "Convert Options" --menu "Choose a conversion option:" 20 60 5 \
                        "x265"        "Convert video to x265" \
                        "video_only"  "Convert only video" \
                        "video_subs"  "Convert video & subtitles" \
                        "metadata"    "Encode metadata" \
                        "Back"        "Return to Main Menu" 3>&1 1>&2 2>&3)
                    if [ $? -ne 0 ]; then
                        continue
                    fi
                    case "$CONVERT_CHOICE" in
                        x265)
                            x265
                            ;;
                        video_only)
                            plex
                            ;;
                        video_subs)
                            video_sub
                            ;;
                        metadata)
                            metadata
                            ;;
                    esac
                    ;;
                Back)
                    continue
                    ;;
            esac
            ;;
        Subs)
            SUBS_CHOICE=$(whiptail --title "Subtitles Menu" --menu "Choose a subtitle option:" 20 60 3 \
                "Extract" "Download subtitles" \
                "Convert"  "Convert subtitles" \
                "Back"     "Return to Main Menu" 3>&1 1>&2 2>&3)
            if [ $? -ne 0 ]; then
                continue
            fi
            case "$SUBS_CHOICE" in
                Convert)
                    convert_srt
                    ;;
                Extract)
                    extract_srt
                    ;;
                Back)
                    continue
                    ;;
            esac
            ;;
        Clean-up)
            CLEANUP_CHOICE=$(whiptail --title "Clean-up Menu" --menu "Choose a cleanup option:" 20 60 4 \
                "ts"           "Remove ts files" \
                "mkv"          "Remove mkv files" \
                "Full"         "Perform full cleanup" \
                "Back"         "Return to Main Menu" 3>&1 1>&2 2>&3)
            if [ $? -ne 0 ]; then
                continue
            fi
            case "$CLEANUP_CHOICE" in
                ts)
                    c_ts
                    ;;
                mkv)
                    c_mkv
                    ;;
                Full)
                    c_all
                    ;;
                Back)
                    continue
                    ;;
            esac
            ;;
        Exit)
            break
            ;;
    esac
done

echo "Exiting script."
