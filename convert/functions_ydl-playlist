# Function to display the menu header
playlist() {
  echo -e "${MENU_1_COLOR}"
  echo " ╔═════════════════════════════════════════════════╗ "
  echo " ║                 Movies & TV Shows               ║ "
  echo " ║            YOUTUBE-DL PLAYLIST SCRIPT           ║ "
  echo " ╚═════════════════════════════════════════════════╝ ""${RESET}"

  # Prompt for playlist URL
  read -p "Enter the URL of the playlist: " playlist_url

  # Prompt for download option
  read -p "Do you want to download the whole playlist? [Y/n]: " download_whole_playlist

  if [[ $download_whole_playlist == "n" || $download_whole_playlist == "N" ]]; then
      # Prompt for items to download
      read -p "Enter the item numbers to download (e.g., 1,2,5-7): " playlist_items
      playlist_items_option="--playlist-items $playlist_items"
  else
      playlist_items_option=""
  fi

  # Download the playlist with subtitles in VTT format
  yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' --yes-playlist --write-sub --sub-lang en,es $playlist_items_option -o '%(playlist)s/%(title)s.%(height)s.WEBRip.x264.%(ext)s' "$playlist_url"

  # Convert subtitles from VTT to SRT using FFmpeg
  for dir in */; do
      if [[ -d "$dir" ]]; then
          cd "$dir" || exit 1
          for file in *.vtt; do
              if [[ -f "$file" ]]; then
                  ffmpeg -i "$file" "${file%.vtt}.srt"
                  rm "$file"  # Remove the original VTT file
              fi
          done
          cd .. || exit 1
      fi
  done

  echo -e "Download complete!\a"
  pause
  show_menu_1
}
