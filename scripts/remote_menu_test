#!/usr/bin/env bash
# Remote Script Executor (whiptail version)
# Author: Converted and improved by ChatGPT based on Jennifer Romero's original script
# Description: This script provides a menu-driven interface to execute remote Bash and Python scripts using whiptail dialogs.
# Version: 2.1
# Last Updated: March 13, 2025
# GitHub Repository: https://github.com/jennyo88/scripts

# Global Dialog Dimensions
DIALOG_HEIGHT=15
DIALOG_WIDTH=60
MENU_HEIGHT=7

# -----------------------------------
# Utility Functions
# -----------------------------------
# Display an error message using whiptail.
error_msg() {
  local message="$1"
  whiptail --title "Error" --msgbox "$message" 10 $DIALOG_WIDTH
}

# Display an informational message using whiptail.
info_msg() {
  local message="$1"
  whiptail --title "Information" --msgbox "$message" 10 $DIALOG_WIDTH
}

# Get user input using whiptail and return the result.
get_input() {
  local title="$1"
  local prompt="$2"
  local default="$3"
  local input
  input=$(whiptail --title "$title" --inputbox "$prompt" 10 $DIALOG_WIDTH "$default" 3>&1 1>&2 2>&3)
  echo "$input"
}

# -----------------------------------
# Check for Required Commands
# -----------------------------------
check_commands() {
  local commands=("bash" "curl" "python3" "whiptail" "pip3")
  for cmd in "${commands[@]}"; do
    if ! command -v "$cmd" &> /dev/null; then
      error_msg "Error: '$cmd' command not found.
Please install '$cmd' and ensure it is in your PATH."
      exit 1
    fi
  done
}

# -----------------------------------
# Exit the Script Gracefully
# -----------------------------------
goodbye() {
  info_msg "Exiting script. Goodbye!"
  clear
  exit
}

# -----------------------------------
# Menu Functions
# -----------------------------------
show_menu_0() {
  CHOICE=$(whiptail --title "Execute Remote Scripts" --menu "Select an option:" \
    $DIALOG_HEIGHT $DIALOG_WIDTH $MENU_HEIGHT \
    "1" "Execute JENNYO88 scripts" \
    "2" "Execute scripts in OTHER repositories" \
    "0" "Exit script" 3>&1 1>&2 2>&3)
  case $CHOICE in
    "1") show_menu_1 ;;
    "2") show_menu_2 ;;
    "0") goodbye ;;
    *) error_msg "Invalid option. Returning to main menu." ; show_menu_0 ;;
  esac
}

show_menu_1() {
  CHOICE=$(whiptail --title "JENNYO88 Scripts" --menu "Select an option:" \
    $DIALOG_HEIGHT $DIALOG_WIDTH $MENU_HEIGHT \
    "1" "Go back to Main Menu" \
    "2" "convert - Converting files" \
    "3" "tmux_ref - tmux reference" \
    "4" "payroll - Payroll TEST script" \
    "5" "testing - Converting TESTING script" \
    "6" "more" \
    "7" "Go to OTHER SCRIPTS Menu" \
    "0" "Exit script" 3>&1 1>&2 2>&3)
  case $CHOICE in
    "1") show_menu_0 ;;
    "2") bash -c "$(curl -fsSL https://raw.githubusercontent.com/jennyo88/scripts/main/convert/main)" ;;
    "3") bash -c "$(curl -fsSL https://raw.githubusercontent.com/jennyo88/scripts/main/scripts/tmux_ref)" ;;
    "4") bash -c "$(curl -fsSL https://raw.githubusercontent.com/jennyo88/scripts/main/scripts/test)" ;;
    "5") bash -c "$(curl -fsSL https://raw.githubusercontent.com/jennyo88/scripts/main/testing/main)" ;;
    "6") execute_bash_script ;;
    "7") show_menu_2 ;;
    "0") goodbye ;;
    *) error_msg "Invalid option. Returning to previous menu." ; show_menu_1 ;;
  esac
}

show_menu_2() {
  CHOICE=$(whiptail --title "Other Scripts" --menu "Select an option:" \
    $DIALOG_HEIGHT $DIALOG_WIDTH $MENU_HEIGHT \
    "1" "Go back to Main Menu" \
    "2" "Execute Another Bash Script" \
    "3" "Execute Python Script" \
    "4" "Go to JENNYO88 Scripts Menu" \
    "0" "Exit script" 3>&1 1>&2 2>&3)
  case $CHOICE in
    "1") show_menu_0 ;;
    "2") execute_bash_script ;;
    "3") execute_python_script ;;
    "4") show_menu_1 ;;
    "0") goodbye ;;
    *) error_msg "Invalid option. Returning to previous menu." ; show_menu_2 ;;
  esac
}

# -----------------------------------
# Script Execution Functions
# -----------------------------------
execute_bash_script() {
  local URL
  URL=$(get_input "Execute Bash Script" "Enter the URL of the Bash script:" "")
  if [ -z "$URL" ]; then
    error_msg "No URL entered. Returning to menu."
    show_menu_2
    return
  fi
  info_msg "Downloading and executing the Bash script..."
  SCRIPT=$(curl -fsSL "$URL")
  if [ -z "$SCRIPT" ]; then
    error_msg "Failed to download the script from the provided URL."
    show_menu_2
    return
  fi
  if bash -c "$SCRIPT"; then
    info_msg "Script execution successful."
  else
    error_msg "Failed to execute the remote script."
  fi
}

execute_python_script() {
  local URL
  URL=$(get_input "Execute Python Script" "Enter the GitHub URL of the Python script:" "")
  if [ -z "$URL" ]; then
    error_msg "No URL entered. Returning to menu."
    show_menu_2
    return
  fi
  info_msg "Downloading the Python script..."
  REMOTE_SCRIPT_CONTENT=$(curl -fsSL "$URL")
  if [ -z "$REMOTE_SCRIPT_CONTENT" ]; then
    error_msg "Failed to download the Python script."
    show_menu_2
    return
  fi
  echo "$REMOTE_SCRIPT_CONTENT" > remote_script.py
  # Extract requirements if any (simple extraction based on import lines)
  grep -E '^(import|from)' remote_script.py | awk '{print $2}' > requirements.txt
  if [ -s requirements.txt ]; then
    if pip3 install --upgrade -r requirements.txt; then
      info_msg "Dependencies installed successfully."
    else
      error_msg "Failed to install dependencies from requirements.txt."
      show_menu_2
      return
    fi
  fi
  if python3 remote_script.py; then
    info_msg "Script execution successful."
  else
    error_msg "Failed to execute the remote Python script."
  fi
}

# -----------------------------------
# Main Logic
# -----------------------------------
check_commands
while true; do
  show_menu_0
done
