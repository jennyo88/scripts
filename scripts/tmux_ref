#!/usr/bin/env_bash

# tmux reference interactive script

# Function to print the header at the top of the menu
print_header() {
    clear
    echo "==================== TMUX REFERENCE SCRIPT ===================="
    echo "Press Ctrl+C to exit at any time."
    echo ""
}

# Function to create a new tmux session
create_session() {
    # Check if already in a session
    if [ -n "$TMUX" ]; then
        echo "Error: You are already in a tmux session. Cannot create a new session."
        return
    fi

    read -p "Enter session name: " session_name

    # Check if the session already exists
    if tmux has-session -t "$session_name" 2>/dev/null; then
        echo "Error: Session '$session_name' already exists. Choose a different name."
    else
        # If the session doesn't exist, create a new one
        tmux new-session -s "$session_name"
    fi
}

# Function to list existing tmux sessions
list_sessions() {
    tmux list-sessions | cut -d ':' -f 1
}

# Function to attach to a specific tmux session
attach_session() {
    read -p "Enter session name to attach: " session_name

    # Check if the session exists before attempting to attach
    if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux attach -t "$session_name"
    else
        echo "Error: Session '$session_name' does not exist."
    fi
}

# Function to detach from the current tmux session
detach_session() {
    tmux detach
}

# Function to split the tmux pane horizontally
split_horizontal() {
    tmux split-window -h
}

# Function to split the tmux pane vertically
split_vertical() {
    tmux split-window -v
}

# Function to navigate between tmux panes
navigate_panes() {
    tmux select-pane -t :.+
}

# Function to close the current tmux pane
close_pane() {
    # Check if there is more than one pane before attempting to close
    if [ "$(tmux list-panes | wc -l)" -gt 1 ]; then
        tmux kill-pane
    else
        echo "Error: Cannot close the last pane in the window."
    fi
}

# Function to rename the current tmux session
rename_session() {
    read -p "Enter new session name: " new_session_name
    tmux rename-session -t "$(tmux display-message -p '#S')" "$new_session_name"
}

# Function to display information about the current tmux session
show_session_info() {
    tmux display-message -p "#{session_name} (#{session_id}): #{session_windows} windows"
}

# Function for the main menu loop
main_menu() {
    echo ""
    echo "1. Create a new session"
    echo "2. List sessions"
    echo "3. Attach to a session"
    echo "4. Detach from the current session"
    echo "5. Split pane horizontally"
    echo "6. Split pane vertically"
    echo "7. Navigate between panes"
    echo "8. Close current pane"
    echo "9. Rename session"
    echo "10. Show session information"
    echo "0. Exit"

    read -p "Choose a tmux command (enter a number): " choice

    case $choice in
        1) create_session ;;
        2) list_sessions ;;
        3) attach_session ;;
        4) detach_session ;;
        5) split_horizontal ;;
        6) split_vertical ;;
        7) navigate_panes ;;
        8) close_pane ;;
        9) rename_session ;;
        10) show_session_info ;;
        0)
            echo "Exiting the tmux reference script. Goodbye!"
            exit 0
            ;;
        *)
            echo "Invalid choice. Please enter a valid number."
            ;;
    esac
}

# Check if tmux is installed
if ! command -v tmux &> /dev/null; then
    echo "Error: 'tmux' is not installed. Please install tmux before running this script."
    exit 1
fi

# Main loop to display the header and run the main menu
while true; do
    print_header
    main_menu
done
