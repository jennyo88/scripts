#!/usr/bin/env_bash

# tmux reference interactive script

# Function to print the header at the top of the menu
print_header() {
    clear
    echo "==================== TMUX REFERENCE SCRIPT ===================="
    echo "Press Ctrl+C to exit at any time."
    echo ""
}

# Function to create a new tmux session
create_session() {
    # Check if already in a session
    if [ -n "$TMUX" ]; then
        echo "Error: You are already in a tmux session. Cannot create a new session."
        return
    fi

    read -p "Enter session name: " session_name

    # Check if the session already exists
    if tmux has-session -t "$session_name" 2>/dev/null; then
        echo "Error: Session '$session_name' already exists. Choose a different name."
    else
        # If the session doesn't exist, create a new one
        tmux new-session -s "$session_name"
    fi
}

# Function to list existing tmux sessions
list_sessions() {
    tmux list-sessions
}

# Function to attach to a specific tmux session
attach_session() {
    read -p "Enter session name to attach: " session_name

    # Check if the session exists before attempting to attach
    if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux attach -t "$session_name"
    else
        echo "Error: Session '$session_name' does not exist."
    fi
}

# Function to detach from the current tmux session
detach_session() {
    tmux detach
}

# Function to split the tmux pane horizontally
split_horizontal() {
    tmux split-window -h
}

# Function to split the tmux pane vertically
split_vertical() {
    tmux split-window -v
}

# Function to navigate between tmux panes
navigate_panes() {
    tmux select-pane -t :.+
}

# Function to close the current tmux pane
close_pane() {
    # Check if there is more than one pane before attempting to close
    if [ "$(tmux list-panes | wc -l)" -gt 1 ]; then
        tmux kill-pane
    else
        echo "Error: Cannot close the last pane in the window."
    fi
}

# Function to rename the current tmux session
rename_session() {
    read -p "Enter new session name: " new_session_name
    tmux rename-session -t "$(tmux display-message -p '#S')" "$new_session_name"
}

# Function to display information about the current tmux session
show_session_info() {
    tmux display-message -p "#{session_name} (#{session_id}): #{session_windows} windows"
}

# Function for the main menu loop
main_menu() {
    PS3="Choose a tmux command (enter a number): "

    options=(
        "Create a new session"
        "List sessions"
        "Attach to a session"
        "Detach from the current session"
        "Split pane horizontally"
        "Split pane vertically"
        "Navigate between panes"
        "Close current pane"
        "Rename session"
        "Show session information"
        "Exit"
    )

    echo ""

    # Calculate the number of options per column
    options_per_column=$(( (${#options[@]} + 1) / 2 ))

    # Print the options in two columns
    for ((i = 1; i <= ${#options[@]}; i++)); do
        printf "%-2s) %-35s" "$i" "${options[$((i - 1))]}"
        if [ $((i % options_per_column)) -eq 0 ]; then
            echo ""
        fi
    done

    # Prompt the user to choose an option
    read -rp "Enter a number: " choice

    case $choice in
        [1-$((${#options[@]}))])
            # Valid choice, execute the corresponding function
            eval "${options[$((choice - 1))]// /_}"
            ;;
        *)
            echo "Invalid choice. Please enter a valid number."
            ;;
    esac
}

# Main loop to display the header and run the main menu
while true; do
    print_header
    main_menu
done
