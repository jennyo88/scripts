#!/bin/bash

# Function to calculate gross pay
calculate_gross_pay() {
    hours_worked=$1
    hourly_rate=$2
    gross_pay=$(echo "$hours_worked * $hourly_rate" | bc)
    echo $gross_pay
}

# Function to calculate federal withholding based on tax brackets
calculate_federal_withholding() {
    taxable_income=$1
    tax_brackets=("${@:2}")

    for ((i=0; i<${#tax_brackets[@]}; i+=3)); do
        lower_limit=${tax_brackets[i]}
        upper_limit=${tax_brackets[i+1]}
        tax_rate=${tax_brackets[i+2]}

        if [ "$taxable_income" -le "$upper_limit" ]; then
            if [ "$taxable_income" -le "$lower_limit" ]; then
                withholding=0
            else
                excess=$(echo "$taxable_income - $lower_limit" | bc)
                withholding=$(echo "$excess * ($tax_rate / 100)" | bc)
            fi
            echo $withholding
            return
        fi
    done
}

# Function to calculate state withholding based on tax brackets
calculate_state_withholding() {
    taxable_income=$1
    tax_brackets=("${@:2}")

    for ((i=0; i<${#tax_brackets[@]}; i+=3)); do
        lower_limit=${tax_brackets[i]}
        upper_limit=${tax_brackets[i+1]}
        tax_rate=${tax_brackets[i+2]}

        if [ "$taxable_income" -le "$upper_limit" ]; then
            if [ "$taxable_income" -le "$lower_limit" ]; then
                withholding=0
            else
                excess=$(echo "$taxable_income - $lower_limit" | bc)
                withholding=$(echo "$excess * ($tax_rate / 100)" | bc)
            fi
            echo $withholding
            return
        fi
    done
}

# Function to calculate net pay
calculate_net_pay() {
    gross_pay=$1
    federal_withholding=$2
    state_withholding=$3

    total_withholdings=$(echo "$federal_withholding + $state_withholding" | bc)
    net_pay=$(echo "$gross_pay - $total_withholdings" | bc)
    echo $net_pay
}

# Input variables
read -p "Enter hours worked: " hours_worked
read -p "Enter hourly rate: " hourly_rate
read -p "Enter frequency (annual, daily, quarterly, semi-annual, semi-monthly, monthly, weekly, biweekly): " frequency
read -p "Enter filing status (single, dual_income_married, unmarried_head_of_household, married): " filing_status

# Validate input
if ! [[ "$hours_worked" =~ ^[0-9]+(\.[0-9]+)?$ && "$hourly_rate" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    echo "Invalid input. Please enter numeric values for hours worked and hourly rate."
    exit 1
fi

# Calculate gross pay
gross_pay=$(calculate_gross_pay $hours_worked $hourly_rate)

# Define federal withholding tax brackets for different filing statuses
# Each entry in the array represents: lower_limit, upper_limit, tax_rate
tax_brackets_single=(0 11600 10 11601 47150 12 47151 100525 22 100526 191950 24 191951 243725 32 243726 609350 35 609351 37)
tax_brackets_head_of_household=(0 11600 10 11601 47150 12 47151 100525 22 100526 191950 24 191951 243725 32 243726 365600 35 365601 37)
tax_brackets_married_filing_separately=(0 16550 10 16551 63100 12 63101 100500 22 100501 191950 24 191951 243700 32 243701 609350 35 609350 37)
tax_brackets_married_filing_jointly=(0 16550 10 16551 63100 12 63101 100500 22 100501 191950 24 191951 243700 32 243701 609350 35 609350 37)

# Define state withholding tax brackets for different filing statuses and frequencies
state_tax_brackets_single_daily=(0 500 1.1 501 1000 2.2)
state_tax_brackets_single_weekly=(0 3500 1.1 3501 7000 2.2)
state_tax_brackets_single_biweekly=(0 7000 1.1 7001 14000 2.2)
# Add more brackets for other frequencies and filing statuses as needed

# Select the appropriate state tax brackets based on frequency and filing status
case "$frequency" in
    "daily")
        state_tax_brackets=("${state_tax_brackets_${filing_status}_daily[@]}")
        ;;
    "weekly")
        state_tax_brackets=("${state_tax_brackets_${filing_status}_weekly[@]}")
        ;;
    "biweekly")
        state_tax_brackets=("${state_tax_brackets_${filing_status}_biweekly[@]}")
        ;;
    # Add cases for other frequencies here
    *)
        echo "Invalid frequency"
        exit 1
        ;;
esac

# Calculate federal withholding based on the appropriate tax bracket
# For example, if the user selects "Single," use tax_brackets_single
# You can extend this logic to include other filing statuses.
federal_withholding=$(calculate_federal_withholding $gross_pay "${tax_brackets_$filing_status[@]}")
state_withholding=$(calculate_state_withholding $gross_pay "${state_tax_brackets[@]}")

# Calculate other payroll items (if applicable)

# Calculate net pay
net_pay=$(calculate_net_pay $gross_pay $federal_withholding $state_withholding)

# Display results with formatted output
echo "Gross Pay: $gross_pay"
echo "Federal Withholding: $federal_withholding"
echo "State Withholding: $state_withholding"
# Display other payroll items if applicable
echo "Net Pay: $net_pay"
