Understanding Redirection and Pipes
===============================================================================

- Manipulating Input and Output Streams
----------------------------------------
    - Redirection and Pipes Overview:
----------------------------------------
        - Redirection (> and >>): Redirects the output of a command to a file. '>' overwrites the file, while '>>' appends to it.
        - Input Redirection (<): Redirects input from a file to a command.
        - Pipes (|): Sends the output of one command as input to another command.

----------------------------------------
    - Practice with Redirection and Pipes:
----------------------------------------
        1. Output Redirection with >:
            - Example: 
                - Redirect the output of 'ls' command to a file named 'list.txt':
                    ls > list.txt
        2. Appending Output with >>:
            - Example: 
                - Append the output of 'ps' command to an existing file named 'processes.txt':
                    ps >> processes.txt
        3. Input Redirection with <:
            - Example: 
                - Use 'sort' command to sort the lines of a file named 'unsorted.txt':
                    sort < unsorted.txt
        4. Using Pipes (|) to Combine Commands:
            - Example: 
                - Use 'grep' to search for a specific pattern in a file and then 'wc' to count the occurrences:
                    grep 'pattern' file.txt | wc -l
        5. Practice with Complex Pipelines:
            - Example: 
                - Find all files modified in the last 7 days in the current directory and its subdirectories, then count the total number of lines:
                    find . -type f -mtime -7 | xargs wc -l
